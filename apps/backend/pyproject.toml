# apps/backend/app/pyproject.toml (CPU-only fix)

[tool.poetry]
name = "sequel-backend"
version = "0.1.0"
description = "API Backend for Sequel-App with KeyBERT integration"
authors = ["mikatepe <mika.tepe@yahoo.de>"]
readme = "README.md"
packages = [{ include = "app" }]

[tool.poetry.dependencies]
python = "^3.13"

# === WEB FRAMEWORK & API ===
fastapi = "^0.117.1"                    # Modern async web framework
uvicorn = {extras = ["standard"], version = "^0.37.0"}  # ASGI server with auto-reload
python-multipart = "^0.0.6"             # File upload support for FastAPI
pydantic = "^2.11.9"                    # Data validation (already included)
pydantic-settings = "^2.1.0"            # Settings management with env vars

# === BACKGROUND TASKS ===
celery = "^5.5.3"                       # Distributed task queue (already included)
kombu = "^5.5.4"                        # Celery messaging library (already included)
redis = "^4.6.0"                        # Cache & message broker for Celery

# === AI/ML - KEYBERT STACK (CPU-only) ===
keybert = "^0.9.0"                      # Keyword extraction library
sentence-transformers = "^5.1.1"        # Sentence embedding models
# Note: torch wird automatisch als dependency installiert (CPU version)
transformers = "^4.35.0"                # Hugging Face transformers
scikit-learn = "^1.3.0"                 # ML utilities (used by KeyBERT)

# === UTILITIES & HELPERS ===
python-dotenv = "^1.0.0"                # Load environment variables from .env
httpx = "^0.27.0"                       # Async HTTP client
python-dateutil = "^2.8.2"             # Date/time utilities
typing-extensions = "^4.8.0"            # Enhanced typing support
psutil = "^7.1.0"                      # System monitoring (already included)

# === LOGGING & MONITORING ===
structlog = "^23.2.0"                  # Structured logging
prometheus-client = "^0.19.0"          # Metrics collection for monitoring

# === SECURITY & AUTH (optional but recommended) ===
python-jose = {extras = ["cryptography"], version = "^3.3.0"}  # JWT token handling
passlib = {extras = ["bcrypt"], version = "^1.7.4"}           # Password hashing

# === DATABASE (optional - for future expansion) ===
sqlalchemy = {version = "^2.0.23", optional = true}
alembic = {version = "^1.13.0", optional = true}
asyncpg = {version = "^0.29.0", optional = true}


[tool.poetry.group.dev.dependencies]
# === TESTING FRAMEWORK ===
pytest = "^8"                          # Testing framework (already included)
pytest-asyncio = "^0.21.1"             # Async testing support
pytest-cov = "^5"                      # Coverage reporting (already included)
pytest-mock = "^3.12.0"                # Mocking utilities
pytest-xdist = "^3.5.0"                # Parallel test execution
httpx = "^0.27"                         # HTTP testing client (already included)

# === CODE QUALITY ===
ruff = "^0.6"                          # Fast Python linter & formatter (already included)
mypy = "^1.11"                         # Static type checking (already included)
pre-commit = "^3.6.0"                  # Git hooks for code quality

# === DEVELOPMENT TOOLS ===
rich = "^13.7.0"                       # Beautiful terminal output
typer = "^0.9.0"                       # CLI framework for scripts
watchdog = "^3.0.0"                    # File system monitoring
ipython = "^8.17.2"                    # Enhanced Python shell

# === TEST DATA & MOCKING ===
faker = "^20.1.0"                      # Generate fake data for tests
factory-boy = "^3.3.0"                 # Test data factories

# === DOCUMENTATION ===
mkdocs = "^1.5.3"                      # Documentation generator
mkdocs-material = "^9.4.8"             # Material theme for docs


[tool.poetry.extras]
# Optional features
database = ["sqlalchemy", "alembic", "asyncpg"]


[tool.poetry.scripts]
# === DEVELOPMENT SCRIPTS ===
dev = "app.scripts:dev"                 # Start development server
start = "app.scripts:start"             # Start production server
test = "app.scripts:test"               # Run tests
lint = "app.scripts:lint"               # Run linting
format = "app.scripts:format_code"      # Format code

# === CELERY SCRIPTS ===
celery-worker = "app.scripts:celery_worker"    # Start Celery worker
celery-beat = "app.scripts:celery_beat"        # Start Celery scheduler
celery-flower = "app.scripts:celery_flower"    # Start Celery monitoring

# === UTILITY SCRIPTS ===
demo = "app.scripts:demo"               # Run KeyBERT demo
health = "app.scripts:health_check"     # Check service health
clean = "app.scripts:clean"             # Clean cache files
info = "app.scripts:info"               # Show project info


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


# ============================================================================
# TOOL CONFIGURATIONS
# ============================================================================

[tool.ruff]
# Ruff configuration (replaces flake8, isort, black)
target-version = "py313"
line-length = 88
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
]
ignore = [
    "E501",   # line too long (handled by formatter)
    "B008",   # do not perform function calls in argument defaults
    "B904",   # Within an `except` clause, raise exceptions with `raise ... from err`
]
unfixable = ["B"]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/**/*.py" = ["B018", "F401", "F811"]  # Allow test-specific patterns

[tool.ruff.isort]
known-first-party = ["app"]


[tool.mypy]
# MyPy static type checking
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
plugins = ["pydantic.mypy"]

# Ignore missing imports for external libraries
[[tool.mypy.overrides]]
module = [
    "keybert.*",
    "sentence_transformers.*",
    "transformers.*",
    "torch.*",
    "celery.*",
    "redis.*",
    "psutil.*",
]
ignore_missing_imports = true


[tool.pytest.ini_options]
# Pytest configuration
minversion = "6.0"
testpaths = ["app/tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",                              # Show summary of all test results
    "-q",                               # Quiet output
    "--strict-markers",                 # Strict marker checking
    "--strict-config",                  # Strict config checking
    "--cov=app",                        # Coverage for app package
    "--cov-report=term-missing",        # Show missing lines in terminal
    "--cov-report=html",                # Generate HTML coverage report
    "--cov-report=xml",                 # Generate XML coverage report
]

# Test markers
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "performance: marks tests as performance tests",
    "unit: marks tests as unit tests",
    "api: marks tests as API tests",
    "service: marks tests as service tests",
]

# Filter warnings
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning:transformers.*",
    "ignore::UserWarning:sentence_transformers.*",
]

# Async test configuration
asyncio_mode = "auto"


[tool.coverage.run]
# Coverage configuration
source = ["app"]
omit = [
    "app/tests/*",                      # Exclude test files
    "*/migrations/*",                   # Exclude database migrations
    "*/__init__.py",                    # Exclude __init__ files
    "app/scripts.py",                   # Exclude scripts
]

[tool.coverage.report]
# Coverage reporting
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
precision = 2
show_missing = true
skip_covered = false


[tool.coverage.html]
directory = "htmlcov"


[tool.coverage.xml]
output = "coverage.xml"