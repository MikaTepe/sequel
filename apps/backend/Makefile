# Sequel Backend Makefile

.PHONY: help install install-dev dev dev-direct test lint format clean docker-build docker-up docker-down

help:
	@echo "üöÄ Sequel Backend Commands:"
	@echo ""
	@echo "üì¶ Setup:"
	@echo "  install          - Install production dependencies"
	@echo "  install-dev      - Install development dependencies"
	@echo "  setup           - Complete development setup"
	@echo ""
	@echo "üîß Development:"
	@echo "  dev             - Start development server (recommended)"
	@echo "  dev-direct      - Start server directly"
	@echo "  dev-module      - Start as Python module"
	@echo ""
	@echo "üß™ Testing:"
	@echo "  test            - Run all tests"
	@echo "  test-cov        - Run tests with coverage"
	@echo "  test-api        - Run only API tests"
	@echo "  test-services   - Run only service tests"
	@echo ""
	@echo "üîç Code Quality:"
	@echo "  lint            - Run linting"
	@echo "  format          - Format code"
	@echo "  clean           - Clean cache files"
	@echo ""
	@echo "üê≥ Docker:"
	@echo "  docker-build    - Build Docker image"
	@echo "  docker-up       - Start Docker services"
	@echo "  docker-down     - Stop Docker services"
	@echo ""
	@echo "‚ö° Celery:"
	@echo "  celery-worker   - Start Celery worker"
	@echo "  celery-beat     - Start Celery beat"
	@echo "  celery-flower   - Start Celery monitoring"

# === SETUP ===

install:
	pip install -r requirements.txt

install-dev:
	pip install -r requirements.txt
	pip install -r requirements-dev.txt

setup: install-dev
	@echo "üîß Setting up development environment..."
	@if [ ! -f .env ]; then echo "üìã Creating .env file..."; cp .env.example .env 2>/dev/null || echo "‚ö†Ô∏è  Please create .env file manually"; fi
	@echo "‚úÖ Development setup complete!"
	@echo ""
	@echo "üöÄ To start the server, run: make dev"
	@echo "üìö API docs will be available at: http://localhost:8000/docs"

# === DEVELOPMENT ===

dev:
	@echo "üöÄ Starting Sequel Backend Development Server..."
	python run.py

dev-direct:
	@echo "üöÄ Starting server directly..."
	python app/main.py

dev-module:
	@echo "üöÄ Starting as Python module..."
	python -m app.main

# === TESTING ===

test:
	@echo "üß™ Running all tests..."
	pytest app/tests/ -v

test-cov:
	@echo "üß™ Running tests with coverage..."
	pytest app/tests/ -v --cov=app --cov-report=term-missing --cov-report=html

test-api:
	@echo "üß™ Running API tests..."
	pytest app/tests/api/ -v

test-services:
	@echo "üß™ Running service tests..."
	pytest app/tests/services/ -v

test-integration:
	@echo "üß™ Running integration tests..."
	pytest app/tests/ -v -m integration

test-performance:
	@echo "üß™ Running performance tests..."
	pytest app/tests/ -v -m performance

# === CODE QUALITY ===

lint:
	@echo "üîç Running linting..."
	flake8 app/
	mypy app/ --ignore-missing-imports

format:
	@echo "üé® Formatting code..."
	black app/
	isort app/

clean:
	@echo "üßπ Cleaning cache files..."
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -delete
	find . -type d -name "*.egg-info" -exec rm -rf {} + 2>/dev/null || true
	rm -rf .coverage htmlcov/ .pytest_cache/ .mypy_cache/

# === DOCKER ===

docker-build:
	@echo "üê≥ Building Docker image..."
	docker-compose build

docker-up:
	@echo "üê≥ Starting Docker services..."
	docker-compose up -d

docker-down:
	@echo "üê≥ Stopping Docker services..."
	docker-compose down

docker-logs:
	@echo "üìã Showing Docker logs..."
	docker-compose logs -f

# === CELERY ===

celery-worker:
	@echo "‚ö° Starting Celery worker..."
	celery -A app.tasks.celery_app worker --loglevel=info --queues=default,keybert,keybert_batch

celery-beat:
	@echo "‚ö° Starting Celery beat scheduler..."
	celery -A app.tasks.celery_app beat --loglevel=info

celery-flower:
	@echo "üå∏ Starting Celery Flower monitoring..."
	@echo "üìä Flower will be available at: http://localhost:5555"
	celery -A app.tasks.celery_app flower

# === UTILITIES ===

check-health:
	@echo "üè• Checking service health..."
	@curl -s http://localhost:8000/health | python -m json.tool 2>/dev/null || echo "‚ùå Service not running"

check-keybert:
	@echo "üî§ Checking KeyBERT service..."
	@curl -s http://localhost:8000/api/v1/nlp/keybert/health | python -m json.tool 2>/dev/null || echo "‚ùå KeyBERT service not available"

demo:
	@echo "üéØ Running KeyBERT demo..."
	@curl -X POST "http://localhost:8000/api/v1/nlp/keybert/extract" \
		-H "Content-Type: application/json" \
		-d '{"text": "Die Bundesregierung plant neue Ma√ünahmen zur Bek√§mpfung des Klimawandels.", "language": "de"}' \
		| python -m json.tool 2>/dev/null || echo "‚ùå Demo failed - is the server running?"

# === QUICK START ===

quickstart: setup dev

# === INFO ===

info:
	@echo "üìä Sequel Backend Information:"
	@echo "  Python: $(shell python --version)"
	@echo "  FastAPI: $(shell pip show fastapi | grep Version | cut -d' ' -f2 2>/dev/null || echo 'Not installed')"
	@echo "  Current directory: $(shell pwd)"
	@echo "  Environment file: $(shell [ -f .env ] && echo '‚úÖ .env exists' || echo '‚ùå .env missing')"